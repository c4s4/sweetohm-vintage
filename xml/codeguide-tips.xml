<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article PUBLIC "-//SWEETOHM//DTD article 1.0//EN"
                         "../dtd/article.dtd">

<article author="Michel CASABIANCA"
         email="casa@sweetohm.net"
         date="2004-01-06"
         id="codeguide-tips"
         lang="fr"
         pdf="true">

 <title>Étendre les fonctionnalités de Code Guide</title>

 <abstract>
  <p>Cet article présente des extensions de CodeGuide y pour lancer
   des tests JUnit, ouvrir une console Beanshell et lancer des builds
   Ant depuis l'interface.</p>
 </abstract>

 <text>

  <sect><title>Présentation de Code Guide</title>

   <p>CodeGuide (que l'on peut télécharger en version d'évaluation sur
    le <link url="http://www.omnicore.com">site d'OmniCore</link>) est
    à mon sens l'environnement de développement le plus efficace pour
    travailler avec Java. Il incorpore les fonctionnalités les plus
    utiles des meilleurs IDEs (comme la vérification de la syntaxe de
    tout un projet en temps réel, une complétion du code efficace et
    un débugger rapide), mais sans en embarquer les moins utiles
    (comme la construction des interfaces graphiques), ce qui le rend
    extrèmement rapide (à tel point que nombre de mes collègues
    pensent que c'est un programme natif :o)</p>

   <figure url="codeguide-tips.codeguide.png">
    <title>L'IDE CodeGuide en action</title>
   </figure>

   <p>Code Guide permet d'étendre ses fonctionnalités en incorporant
    des outils externes. C'est ainsi que CVS est intégré à l'IDE par
    exemple. Dans la suite de cet article, je présente l'intégration
    de JUnit, Beanshell et Ant dans cet IDE.</p>

  </sect>

  <sect><title>Intégrer JUnit</title>

   <p>JUnit est un framework de test unitaire. Il en facilite le 
    développement ainsi que l'exécution et permet la génération de
    rapports (par l'interédiaire de tâches Ant dédiées). C'est un
    outil Open Source que l'on peut télécharger à l'adresse <link
    url="http://www.junit.org"/>. On trouvera une introduction à Junit
    (écrite par votre serviteur) sur le site d'<link
    url="http://otn.oracle.com/oramag/oracle/03-may/o33junit.html">Oracle
    Magazine</link>, dans le numéro de Mai/Juin 2003.</p>

   <p>Le but de cette intégration est de lancer l'exécution de tests
    JUnit d'un simple clic et d'en visualiser le résultat dans la
    console de sortie des outils.</p>

   <p>Ouvrir le menu <keyb>Tools/Configure Tools...</keyb>. La fenêtre
    suivante apparaît&dp;</p>

   <figure url="codeguide-tips.junit-dialog.png">
    <title>Intégration de JUnit dans CodeGuide</title>
   </figure>

   <p>Cliquer sur le bouton <imp>New</imp>, puis renseigner les champs
    suivants&dp;</p>

   <table>
    <th>
     <co>Champ</co>
     <co>Valeur</co>
     <co>Commentaire</co>
    </th>
    <li>
     <co>Category</co>
     <co> </co>
     <co>Laisser ce champ vide (sans quoi l'item JUnit
      est placé dans un sous-menu JUnit, ce qui ajoute un niveau de
      profondeur inutile dans le menu).</co>
    </li>
    <li>
     <co>Name</co>
     <co>JUnit</co>
     <co>Logique</co>
    </li>
    <li>
     <co>Kind</co>
     <co>Tool for files</co>
     <co>Pour lancer les fichiers Java en tant que tests JUnit</co>
    </li>
    <li>
     <co>Console</co>
     <co>JUnit</co>
     <co>C'est le nom de la console dans laquelle sera affiché le
      résultat du test</co>
    </li>
    <li>
     <co>Executable</co>
     <co>java</co>
     <co>On lance java</co>
    </li>
    <li>
     <co>Working directory</co>
     <co>$DESTINATION_DIRECTORY_PATH$</co>
     <co>Pour lancer JUnit dans le répertoire de destination de la
      compilation</co>
    </li>
    <li>
     <co>Arguments</co>
     <co>-cp $CLASSPATH$ junit.textui.TestRunner $FILE_CLASSNAME$</co>
     <co>De manière à ce que le lanceur de test lance la classe
      générée à partir du source</co>
    </li>
    <li>
     <co>File pattern</co>
     <co>*Test.java</co>
     <co>On filtre les tests JUnit</co>
    </li>
    <li>
     <co>Behavior</co>
     <co>Default</co>
     <co>Pourquoi pas...</co>
    </li>
   </table>
   
   <p>Fermer la boite de configuration des outils en cliquant sur
    <imp>OK</imp>. On pourra maintenant lancer un test d'un clic droit
    sur le fichier (dans la section <imp>Project</imp> ou dans la zone
    d'édition elle même) et en sélectionnant l'item <imp>JUnit</imp>
    du menu&dp;</p>

   <figure url="codeguide-tips.junit-menu.png">
    <title>Lancer un test JUnit</title>
   </figure>

   <p>Le résultat du test est affiché dans la zone de sortie des
    outils, comme suit&dp;</p>

   <figure url="codeguide-tips.junit-result.png">
    <title>Affichage du résultat d'un test JUnit</title>
   </figure>
   
   <p>On notera qu'il faut cliquer sur le bouton <imp>Build
     Project</imp> de la barre d'outil (ou appuyer sur la touche
    <imp>F9</imp>), avant de lancer le test, de manière à regénérer
    la classe du test. D'autre part, il serait possible de lancer un
    test en le munissant d'une méthode <code>main()</code> et en
    faisant le <imp>Starting Point</imp> du projet, mais il est plus
    simple de lancer un test en passant par le lanceur JUnit (et c'est
    même parfois très ennuyeux d'avoir à changer le starting point, en
    particulier pour les applications web).</p>

  </sect>

  <sect><title>Intégration de Beanshell</title>

   <p>Beanshell est un interpréteur Java (ou du moins de Java muni de
    quelques extensions et restrictions rendant les scripts plus
    efficaces). On peut le télécharger à l'adresse <link
     url="http://www.beanshell.org"/>. L'intégrer dans CodeGuide est
    utile lorsqu'on souhaite développer des scripts ou encore se
    servir de l'interpréteur comme une sorte de cahier de brouillon
    pour y tester des expressions Java avant de les intégrer dans le
    code.</p>

   <p>Le but de cette intégration est donc double&dp; il serait utile
    de pouvoir lancer l'interprétation d'un script en cours d'édition
    et de lancer l'interpréteur dans la console.</p>

   <sect><title>Interpréter un script</title>

    <p>Pour intégrer l'interpréteur de script, ouvrir la boite de
     configuration des outils, cliquer sur <imp>New</imp> pour y
     créer une nouvelle entrée, puis la configurer comme suit&dp;</p>

    <table>
     <th>
      <co>Champ</co>
      <co>Valeur</co>
      <co>Commentaire</co>
     </th>
     <li>
      <co>Category</co>
      <co> </co>
      <co>Laisser ce champ vide</co>
     </li>
     <li>
      <co>Name</co>
      <co>Beanshell Interpreter</co>
      <co>Logique</co>
     </li>
     <li>
      <co>Kind</co>
      <co>Tool for files</co>
      <co>Pour interprèter des sources Beanshell</co>
     </li>
     <li>
      <co>Console</co>
      <co>Beanshell</co>
      <co>Le nom de la console</co>
     </li>
     <li>
      <co>Executable</co>
      <co>java</co>
      <co>On lance java</co>
     </li>
     <li>
      <co>Working directory</co>
      <co>$PARENT_DIRECTORY_PATH$</co>
      <co>On lance le script depuis son répertoire</co>
     </li>
     <li>
      <co>Arguments</co>
      <co>-cp /opt/java/bsh/lib/bsh-1.2b7.jar:$CLASSPATH$
       bsh.Interpreter $FILE_PATH$</co>
      <co>On définit le CLASSPATH avec le jar de Beanshell (à
       remplacer par le chemin de votre installation) et on
       complète avec le CLASSPATH du projet, on passe le fichier à
       interprèter en paramètre</co>
     </li>
     <li>
      <co>File pattern</co>
      <co>*.bsh</co>
      <co>On sélectionne les sources Beanshell</co>
     </li>
     <li>
      <co>Behavior</co>
      <co>Default</co>
      <co>Pourquoi pas...</co>
     </li>
    </table>

    <p>On peut maintenant lancer l'interpréteur d'un clic droit de la
     souris sur le source d'un script et l'on voit le résultat dans la
     console Beanshell.</p>

    <figure url="codeguide-tips.beanshell-interpreter.png">
     <title>Interpreteur Beanshell</title>
    </figure>

   </sect>

   <sect><title>Lancer la console Beanshell</title>

    <p>Pour lancer la console, ouvrir la boite de dialogue de
     configuration des outils, cliquer sur <imp>New</imp>, puis saisir
     les champs suivants&dp;</p>

    <table>
     <th>
      <co>Champ</co>
      <co>Valeur</co>
      <co>Commentaire</co>
     </th>
     <li>
      <co>Category</co>
      <co> </co>
      <co>Laisser ce champ vide</co>
     </li>
     <li>
      <co>Name</co>
      <co>Beanshell Console</co>
      <co>Logique</co>
     </li>
     <li>
      <co>Kind</co>
      <co>Tool in menu</co>
      <co>Pour interprèter lancer la console depuis le menu
       <imp>Tools</imp></co>
     </li>
     <li>
      <co>Console</co>
      <co>Beanshell</co>
      <co>Le nom de la console</co>
     </li>
     <li>
      <co>Executable</co>
      <co>java</co>
      <co>On lance la JVM</co>
     </li>
     <li>
      <co>Working directory</co>
      <co> </co>
      <co>Laisser vide (à moins que vous ne souhaitiez travailler dans
       un répertoire particulier)</co>
     </li>
     <li>
      <co>Arguments</co>
      <co>-cp /opt/java/bsh/lib/bsh-1.2b7.jar:$CLASSPATH$ bsh.Interpreter</co>
      <co>On définit le CLASSPATH avec le jar de Beanshell (à
       remplacer par le chemin de votre installation) et on
       complète avec le CLASSPATH du projet, on ne passe aucun fichier
       à l'interpréteur pour qu'il interprète les entrées de
       l'utilisateur</co>
     </li>
     <li>
      <co>File pattern</co>
      <co> </co>
      <co>Laisser vide, n'a pas de sens dans ce contexte</co>
     </li>
     <li>
      <co>Behavior</co>
      <co>Default</co>
      <co>Pourquoi pas...</co>
     </li>
    </table>

    <p>Pour ouvrir la console Beanshell, ouvrir le menu
     <keyb>Tools/Beanshell Console</keyb>. La console Beanshell
     suivante apparaît&dp;</p>

    <figure url="codeguide-tips.beanshell-console.png">
     <title>Console Beanshell</title>
    </figure>

    <p>On peut y évaluer des expressions Java et en voir immédiatement
     le résultat dans la console. C'est très pratique pour tester
     rapidement des bouts de code Java, que l'on peut ensuite
     copier/coller dans l'éditeur.</p>

   </sect>

  </sect>

  <sect><title>Intégration de Ant</title>

   <p>Ant est un système de build (comparable à make) dédié à Java. On
    pourra trouver une série d'articles d'introduction à Ant (écrite
    par votre serviteur) sur le site de <link
    url="http://otn.oracle.com/oramag/oracle/02-nov/o62odev_ant.html">Oracle
    Magazine</link>. Ant est intégré à CodeGuide, mais si l'on active
    la compilation utilisant Ant, on ne peut profiter la compilation
    et validation temps réel de CodeGuide (une fonctionnalité vite
    indispensable).</p>

   <p>Le but de cette intégration est donc de pouvoir lancer
    facilement un build Ant tout en utilisant la compilation temps
    réel de CodeGuide.</p>

   <p>Dans la boite de configuration des outils, on remplira les
    champs comme suit&dp;</p>

   <table>
    <th>
     <co>Champ</co>
     <co>Valeur</co>
     <co>Commentaire</co>
    </th>
    <li>
     <co>Category</co>
     <co> </co>
     <co>Laisser ce champ vide</co>
    </li>
    <li>
     <co>Name</co>
     <co>Ant</co>
     <co>Se passe de commentaires</co>
    </li>
    <li>
     <co>Kind</co>
     <co>Tool for files</co>
     <co>De manière à rechercher le build file dans un répertoire
      parent du fichier (cela fonctionne bien si le build file est à
      la racine des projets)</co>
    </li>
    <li>
     <co>Console</co>
     <co>Ant</co>
     <co>Le nom de la console</co>
    </li>
    <li>
     <co>Executable</co>
     <co>ant</co>
     <co>On lance lance Ant</co>
    </li>
    <li>
     <co>Working directory</co>
     <co>$PARENT_DIRECTORY_PATH$</co>
     <co>On se place dans le répertoire parent du fichier</co>
    </li>
    <li>
     <co>Arguments</co>
     <co>-find build.xml $USER_ARGUMENTS$</co>
     <co>On demande à Ant de rechercher le build file (nommé
      <file>build.xml</file>) récursivement dans les répertoires
      parents. La valeur $USER_ARGUMENTS$ donne à l'utilisateur
      l'occasion de saisir le nom de la target à lancer.</co>
    </li>
    <li>
     <co>File pattern</co>
     <co>*</co>
     <co>On peut cliquer sur tout fichier pour lancer la build Ant (utile
      si l'on transforme des documents XML de la sorte, par exemple)</co>
    </li>
    <li>
     <co>Behavior</co>
     <co>Default</co>
     <co>Pourquoi pas...</co>
    </li>
   </table>
   
   <p>On peut maintenant ouvrir le menu contextuel d'un fichier (d'un
    clic droit) et lancer le build en sélectionnant Ant. Pour ma part,
    je sélectionne <imp>Use internal incremental compiler</imp> dans
    mes préférences de projet et je lance les builds Ant lorsque c'est
    nécessaire (pour générer une release par exemple).</p>

    <figure url="codeguide-tips.ant.png">
     <title>Console Ant affichant le résultat d'un build</title>
    </figure>

  </sect>

  <sect><title>Conclusion</title>

   <p>Même si les possibilités de personnalisation de CodeGuide ne
    peuvent égaler celles d'un Emacs, elles sont très utiles pour
    rendre cet IDE encore plus efficace. On peut se demander ce que
    pourrait faire de plus CodeGuide (surtout lorsqu'on connaît ses
    capacité de <term>Hot Swap</term> de classe en cours de débuggage
    ou son intégration de Tomcat), si ce n'est de fournir une API pour
    développer des extensions. Messieurs les développeurs d'OmniCore,
    à vous de jouer&pe;</p>

  </sect>

  <p>Un grand merci à Frédéric pour ses corrections&dp;</p>

 </text>

</article>

<!-- Local IspellDict: francais -->
