<?xml version="1.0" encoding="iso-8859-1"?>

<!DOCTYPE article PUBLIC "-//CAFEBABE//DTD article 1.0//EN"
                         "../dtd/article.dtd">

<article lang="fr"
         id="sat.doc"
         date="2003-07-14"
         email="casa@sweetohm.net"
         author="Michel CASABIANCA"
         keywords="ant, tool, plugin">

 <title>Sweet Ant Tools 1.0</title>

 <abstract>
  <p>Sweet Ant Tools est un ensemble de tâches pour Ant sous licence
   Apache.  Elles sont, pour l'essentiel, dédiées à la construction de
   pages HTML à partir de fichiers XML.</p>
 </abstract>

 <text>
  
  <sect><title>Installer SAT</title>

   <p>Pour installer SAT, vous devez au préalable installer une
    machine virtuelle Java 1.2 ou plus récente. On peut en télécharger
    une gratuitement sur le <link
    url="http://java.sun.com/products/jdk/1.2">site web de Sun</link>.
    La dernière version de SAT est disponible sur <link
    url="http://www.cafebabe.net/html/sat.html">ma page
    personnelle</link>.</p>

   <p>Pour installer SAT, dézipper l'archive dans le répertoire de
    votre choix. Copier ensuite les fichiers du répertoire
    <file>lib</file> dans le répertoire <file>lib</file> de votre
    installation de Ant.</p>

  </sect>

  <sect><title>Compiler SAT</title>

   <p>Pour compiler SAT, vous devez installer Ant version 1.3 ou
    1.4. Vous pouvez le télécharger sur <link
    url="http://jakarta.apache.org/ant">le site d'Apache</link>. On
    devra aussi installer les jars de Ant (<file>ant.jar</file>) et
    d'un parser JAXP (par exemple, celui que l'on peut télécharger sur
    <link url="http://java.sun.com/xml">le site de Sun</link>) dans le
    répertoire <file>lib</file> de SAT.</p>

   <p>Pour générer le fichier jar contenant les classes de SAT, se
    placer à la racine de votre installation de SAT taper
    <keyb>ant jar</keyb> sur la ligne de commande. Placer ensuite le
    fichier jar généré (<file>sat.jar</file> du répertoire
    <file>lib</file>) dans le répertoire <file>lib</file> de Ant. On
    pourra alors générer les documentations et l'archive zip en tapant
    <keyb>ant</keyb> (SAT s'utilise lui même pour compiler les
    documentations et l'archive zip).</p>

  </sect>

  <sect><title>Console Ant</title>

   <p>Cet outil permet de lancer Ant en mode console (dans un terminal
    ou la console d'un IDE par exemple). On y tape des commande qui
    sont interprêtées par la console pour lancer les targets du build
    file chargé. L'intérêt de cette console est d'accélérer grandement
    la vitesse d'exécution car on  économise le temps de lancement de
    la machine virtuelle, de compilation par le JIT, de chargement du
    projet, etc. On peut ainsi espérer des gains d'un facteur 5. Il va
    sans dire que le gain est d'autant plus important que le temps
    d'exécution de ma target est court.</p>

   <sect><title>Installation</title>

    <p>Aller dans le répertoire <file>bin</file> de votre installation
     de Ant. Recopier le fichier <file>ant</file> (ou
     <file>ant.bat</file> pour les handicapés de l'OS) sous le nom
     <file>antc</file> (ou <file>antc.bat</file>). Remplacer, dans ce
     nouveau fichier, toutes les occurences de
     <code>org.apache.tools.ant.Main</code> par
     <code>net.cafebabe.sat.ant.Console</code>. Ce script lancera alors
     la console Ant en lieu et place de Ant lui même. S'assurer que ce
     ficher est dans votre <code>PATH</code>.</p>

    <p>Il faut bien entendu installer SAT. Pour ce faire, recopier le
     fichier <file>sat.jar</file> dans la répertoire <file>lib</file>
     de votre installation de Ant.</p>

   </sect>

   <sect><title>Utilisation</title>

    <p>Pour lancer la console Ant, se placer dans le répertoire de son
     projet (où se trouve votre fichier de projet
     <file>build.xml</file>) et taper <keyb>antc</keyb>. On obtient
     une aide sur les paramètres en ligne de commande en tapant
     <keyb>antc -help</keyb>&dp;</p>

<source><![CDATA[Ant Console 0.9 (C) Michel Casabianca 2003
type "help" to get help on console commands
Usage: antc [-help] [-version] [-emacs] [-timer] [-file file] [-find file]
-help    Print this help screen
-version Print the version
-timer   Print build times
-file    To set the build file
-find    To search for the build file]]></source>


    <p>Lorsqu'on lance la console Ant, on obtient une invite du
     type&dp;</p>

    <figure url="sat.doc.console.png">
     <title>Console Ant en action</title>
    </figure>

    <p>Pour obtenir de l'aide sur les commandes que l'on peut lancer
     dans la console, taper <keyb>help</keyb> à l'invite. On obtient la
     page d'aide suivante&dp;</p>

<source><![CDATA[Commands you can run in the console are the following:
  help          To display this help screen
  exit          To quit the console
  desc          To describe the loaded project
  load file     To load the build file
  find file     To find the project file
  reload        To reload the current project
  timer on/off  To set timer on/off
  target foo    To run the target foo
  targetname    To run the target (can't be a console command)
  <empty>       To repeat the last command]]></source>

    <p>On notera que pour lancer l'exécution d'un target, il suffit de
     taper son nom à l'invite (c'est un raccourci pour la commande
     <keyb>target</keyb> si le nom de la target n'est pas celui d'une
     commande de la console). On notera aussi que l'on peut répéter la
     dernière commande en tapant simplement <keyb>ENTER</keyb>.</p>

    <p>Il possible de charger un autre build file avec la
     commande <keyb>load</keyb> (le chemin du fichier est alors
     relatif au répertoire courant) et de rechercher récusivement le
     build file dans le système de fichier avec la commande
     <keyb>find</keyb> (comparable au paramètre <keyb>-find</keyb> sur
     la ligne de commande de Ant). Il est aussi possible de recharger
     le projet courant avec la commande <keyb>reload</keyb>. C'est
     nécessaire lorsque le build file a changé sur le disque ou
     lorsqu'un projet a un comportement étrange (ce qui arrive
     parfois à la suite d'une erreur de build, certaines tâches
     supportant mal d'être relancées après une erreur).</p>

    <p>La commande <keyb>desc</keyb> affiche une description du projet
     en cours (comme avec le paramètre <keyb>-projecthelp</keyb> de
     Ant).</p>

    <p>Enfin, on peut afficher les temps d'exécution avec la commande
     <keyb>timer</keyb> ayant pour paramètre <value>on</value> ou
     <value>off</value>. C'est utile pour se convaincre que la console
     est bien plus rapide (c'est pour cela que j'affiche le résultat en
     millisecondes :o)</p>

   </sect>
   
   <sect><title>Notes</title>
   
    <p>Dans la mesure où l'on économise le temps d'initialisation de la VM,
     de la compilation par le JIT et le temps de chargement du projet, il
     est clair que l'on obtient de meilleurs résultats pour des builds
     courts. Par exemple, l'exécution d'une tache qui ne fait rien, la
     console met une trentaine de millisecondes contre près de 5 secondes
     dans Ant (un gain de perfs d'un facteur 100 environ). Cependant le gain
     reste appréciable pour de vrais builds. Par exemple, la génération du
     projet SAT prend environ 12 secondes dans la console contre 25 secondes
     anviron avec Ant.</p>
     
    <p>Ma tache <code>server</code> permet d'obtenir les memes résultats,
     mais sa mise en oeuvre est plus complexe et je ne l'intègre plus dans
     les dernières versions de SAT (on pourra encore la trouver dans la
     <link url="http://www.cafebabe.net/arc/sat-0.7.zip">version 0.7</link>).
    </p>
    
    <p>La console a été développée avec la dernière version stable de Ant,
     soit la <value>1.5.3-1</value>. Faites moi savoir si vous avez testé
     avec une autre version.</p>
   
   </sect>

  </sect>

  <sect><title>Description des tâches</title>

   <p>SAT est un ensemble de tâches optionnelles pour Ant, pour chaque
    tâche est donc associé un élément XML et une déclaration
    <code>taskdef</code> (pour indiquer quelle classe Java définit la
    tâche).</p>

   <sect><title>File, dir et fileset</title>

    <p>Toutes ces tâches manipulent des fichiers et utilisent les
     attributs <code>file</code> et <code>dir</code> ainsi que
     l'élément encapsulé <code>fileset</code> pour la sélection des
     fichiers à traiter. Tous ces attributs ou élément ont la même
     syntaxe que voici:</p>
    
    <list>
     <item><code>file</code>: C'est un attribut contenant la liste
      (dont le séparateur est la virgule) des fichiers à traiter. Par
      exemple, <code>file="foo"</code> sélectionne le fichier
      <file>foo</file> et <file>file="foo,bar"</file> les fichiers
      <file>foo</file> et <file>bar</file>.
     </item>
     <item><code>dir</code>: C'est un attribut contenant la liste (dont
      le séparateur est une virgule) des répertoires à
      traiter. Sélectionne tous les fichiers du répertoire, mais pas
      ceux d'un éventuel sous répertoire. Par exemple,
      <code>dir="foo"</code> sélectionne tous les fichiers du
      répertoire <file>foo</file>, quelque soit leur type. Les fichiers
      d'un répertoire <file>foo/CVS</file> ne seraient pas
      sélectionnés.  <code>dir="foo,bar"</code> sélectionne quant à lui
      tous les fichiers des répertoires <file>foo</file> et
      <file>bar</file>.</item> <item><code>fileset</code>: C'est un
      élément encapsulé permettant une sélection plus fine des
      fichiers. Voire la documentation de Ant pour plus de
      détails.</item>
    </list>
    
    <p>Les fichiers ou répertoires dont les chemins sont relatifs le
     sont par rapport au script Ant. Donc un attribut
     <code>file="foo"</code> dans le script
     <file>/home/casa/build.xml</file> désigne le fichier
     <file>/home/casa/foo</file>.</p>
    
    <p>Il est possible, dans une même tâche, d'utiliser toute
     combinaison d'attributs <code>file</code> et <code>dir</code> et
     de l'élément <code>fileset</code>.  Par exemple, l'élément:</p>
    
    <source>&lt;foo file="file" dir="dir"&gt;
  &lt;fileset dir="dir2" includes="*.xml"/&gt;
&lt;/foo&gt;</source>

    <p>Sélectionne le fichier <file>file</file>, les fichiers du répertoire
     <file>dir</file> et les fichiers XML du répertoire <file>dir2</file>.</p>

   </sect>

   <sect><title>Bsh</title>

    <sect><title>Description</title>

     <p>Cette tâche exécute un script <link
       url="http://www.beanshell.org"> Beanshell</link>. Ce script
       peut être contenu dans un fichier ou encapsulé dans l'élément
       de la tâche. On peut aussi passer des arguments au script avec
       l'attribut <code>args</code> ou une expression dans un script
       encapsulé.</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="bsh" classname="net.cafebabe.sat.bsh.BshTask"/&gt;</source>

     <p>La tâche Beanshell a été testée avec succès avec la version
      1.1a18 (la version dont le jar est distribuée dans ce
      package). Elle ne fonctionne pas avec les versions 1.1a12 ou
      antérieures (l'interface <code>bsh.ConsoleInterface</code> était
      différente avant la version 1.1a16) et avec la version 1.2b1
      (pour cause de bug).</p>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Script(s) Beanshell à exécuter</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des scripts à traiter</co>
       <co>Non</co>
      </li>
      <li>
       <co>args</co>
       <co>Liste d'arguments (séparés par des virgules) à passer au
        script Beanshell. On peut accéder au tableau des arguments
        avec <code>this.interpreter.get("bsh.args");</code></co>
       <co>Non</co>
      </li>
      <li>
       <co>reset</co>
       <co>Indique si l'interpréteur Beanshell doit être réinitialisé avant
        l'exécution d'un nouveau script. Peut prendre les valeurs
        <value>true</value> ou <value>false</value>.</co>
       <co>Non (<value>true</value> par défaut)</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner les script à exécuter à l'aide d'un
      élément <code>&lt;fileset&gt;</code> encapsulé. Voire la
      documentation de Ant pour de plus amples détails sur l'élément
      <code>fileset</code>.</p>

    </sect>

    <sect><title>Contenu textuel</title>

     <p>Un script peut être écrit directement dans un élément
      <code>&lt;bsh&gt;</code>.</p>

    </sect>

    <sect><title>Propriétés Ant</title>

     <p>Un script Beanshell peut accéder aux propriétés Ant à l'aide des
      commandes <code>setAntProperty()</code> et <code>getAntProperty()</code>.
      Voir plus bas pour un exemple.</p>

    </sect>

    <sect><title>Commandes Beanshell</title>

     <p>Ce package propose des commandes Beanshell permettant
      d'accéder aux propriétés Ant (définies à l'aide d'éléments
      <code>property</code>) à l'intérieur d'un script Beanshell. Ces
      commandes ont la signature suivante:</p>

     <list>
      <item><code>void setAntProperty(String name,String
       value)</code>: donne la valeur <value>value</value> à la
       propriété nommée <code>name</code>.  La propriété n'a pas à
       avoir été déclarée par un élément <code>property</code>.</item>
       <item><code>String getAntProperty(String name)</code>: renvoie
       la valeur de la propriété Ant appelée
       <value>name</value>.</item>
     </list>

     <p>Une autre commande permet de résoudre un fichier relativement
      au script Ant en cours d'exécution. En effet, un chemin relatif
      dans un script Ant doit être interprété par rapport au
      répertoire du script (et non par rapport au répertoire
      courant). La signature de cette commande est la suivante:</p>

     <list>
      <item><code>File resolveAntFile(String file)</code>: retourne le
       fichier par rapport au répertoire du script Ant.</item>
     </list>

     <p>On notera que cette tâche définit une variable
      <code>antProject</code> dans l'interpréteur Beanshell. Cette
      variable contient une référence vers le projet Ant en cours
      d'exécution.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour exécuter un script <file>bsh.bsh</file> du répertoire
      <file>test</file>, on écrira l'élément suivant:</p>

     <source>&lt;bsh file="test/bsh.bsh"/&gt;</source>

     <p>On peut aussi écrire le script directement dans l'élément
      <code>&lt;bsh&gt;</code>, comme suit:</p>

     <source>&lt;bsh&gt;
  print("Hello World !");
&lt;/bsh&gt;</source>

     <p>On notera qu'un script encapsulé dans un élément <code>bsh</code>
      est parsé lors de l'exécution du script Ant. Il ne doit donc
      pas contenir les caractères &lt; et &amp; ou bien il doit
      être contenu dans un marqueur <code>CDATA</code>, comme suit:</p>

     <source>&lt;bsh&gt;
  &lt;![CDATA[
  print("&lt;date&gt;"+new Date()+"&lt;/date&gt;");
  ]]&gt;
&lt;/bsh&gt;</source>

     <p>Pour passer les  arguments <code>foo</code> et
      <code>bar</code> au script, (comme s'ils lui étaient passés par
      la ligne de commande) on utilisera un attribut
      <code>args</code>:</p>

     <source>&lt;bsh file="test/bsh.bsh" args="foo,bar"/&gt;</source>

     <p>Pour finir, un exemple plus complexe:</p>

     <source>&lt;bsh file="test/bsh.bsh" args="foo,bar"&gt;
  nested="nested";
&lt;/bsh&gt;</source>

     <p>Où le script <file>test/bsh.bsh</file> est le suivant:</p>

     <source>#!/usr/local/bin/bsh
// display arguments on the command line
args=this.interpreter.get("bsh.args");;
if(args!=null) {
    for(int i=0;i&lt;args.length;i++)
        print("Argument "+i+": "+args[i]);
}
// display argument in nested script
print("Argument nested: "+nested);</source>

     <p>Cet exemple produit l'affichage suivant:</p>

     <source>bsh:
    [bsh] Arguments: foo bar
    [bsh] Executing nested script...
    [bsh] Executing script 'test/bsh.bsh'...
    [bsh] Argument 0: foo
    [bsh] Argument 1: bar
    [bsh] Argument nested: nested</source>

     <p>Cette trace indique l'ordre d'évaluation du code beanshell:</p>

     <enum>
      <item>Les arguments sont déclarés à l'interpréteur.</item>
      <item>Puis le script encapsulé (s'il y en a un) est exécuté.</item>
      <item>Pour finir, le ou les scripts des fichiers sélectionnés sont
       exécutés.</item>
     </enum>

     <p>Le script suivant affiche la valeur de la propriété <code>foo</code>
      et donne une valeur à <code>bar</code>:</p>

     <source>print(getAntProperty("foo");
setProperty("bar","Hello World!");</source>

    </sect>

   </sect>

   <sect><title>XTask</title>

    <sect><title>Description</title>

     <p>Cette tâche utilise le processeur <link
      url="http://www.jclark.com/xml/xt.html">XT</link> de James Clark
      pour effectuer une transformation XSLT d'un document XML. Ce
      processeur (dont le développement a été arrêté par l'auteur) est
      tenu pour le plus rapide des processeurs XSLT implémentés en
      Java.</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="xtask" classname="net.cafebabe.sat.xml.XTask"/&gt;</source>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) XML à transformer.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des fichiers XML à transformer.</co>
       <co>Non</co>
      </li>
      <li>
       <co>style</co>
       <co>Indique la feuille de style à utiliser pour la transformation.</co>
       <co>Oui</co>
      </li>
      <li>
       <co>tofile</co>
       <co>Donne le nom du fichier généré (s'il n'y en a qu'un seul).</co>
       <co>Non</co>
      </li>
      <li>
       <co>todir</co>
       <co>Donne le répertoire des fichiers générés (s'il y en a
        plusieurs).</co>
       <co>Non</co>
      </li>
      <li>
       <co>extension</co>
       <co>Extension des fichiers générés.</co>
       <co>Non (<file>.html</file> par défaut)</co>
      </li>
      <li>
       <co>force</co> <co>Force la transformation même si le fichier
       généré existe et est plus récent que le fichier source XML et
       la feuille de style XSLT.  Peut prendre les valeurs
       <value>true</value> ou <value>false</value>.</co>
       <co>Non (<value>false</value> par défaut)</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner le ou les fichiers XML à transformer à l'aide
      d'un élément <code>&lt;fileset&gt;</code>. Voire la documentation de Ant
      pour plus de détails sur cet élément.</p>

     <p>On peut de plus passer des paramètres au processeur XSLT à
      l'aide d'éléments <code>&lt;arg&gt;</code>. Par exemple, pour passer
      la valeur <value>bar</value> au paramètre <code>foo</code>, on inclura
      dans l'élément <code>&lt;xtask&gt;</code> l'élément:</p>

     <source>&lt;arg name="foo" value="bar"/&gt;</source>

     <p>L'élément <code>&lt;xtask&gt;</code> ne prend pas en compte de contenu
      textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour transformer le fichier <file>foo.xml</file> en
      <file>bar.html</file> à l'aide de la feuille de style
      <file>transfo.xsl</file>, on écrira l'élément suivant:</p>

     <source>&lt;xtask file="foo.xml"
       style="transfo.xsl"
       tofile="bar.html"/&gt;</source>

     <p>Pour passer la valeur <value>bar</value> au paramètre <code>foo</code>,
      on invoquera la transformation par:</p>

     <source>&lt;xtask file="foo.xml"
       style="transfo.xsl"
       tofile="bar.html"&gt;
  &lt;arg name="foo" value="bar"/&gt;
&lt;/xtask&gt;</source>

     <p>Pour transformer les fichiers XML du répertoire
      <file>xml</file> en HTML avec la feuille de style
      <file>page.xsl</file> et placer les fichiers générés dans le
      répertoire <file>html</file>, on écrira:</p>

     <source>&lt;xtask style="page.xsl" todir="html"&gt;
  &lt;fileset dir="xml" includes="*.xml"/&gt;
&lt;/xtask&gt;</source>

    </sect>

    <sect><title>Note</title>

     <p>Cette tâche était auparavant distribuée indépendemment sur
      ma page (en version 0.1). Elle est maintenant partie intégrante
      de SAT.</p>

    </sect>

   </sect>

   <sect><title>Valid</title>

    <sect><title>Description</title>

     <p>Cette tâche permet de valider des fichiers XML. Elle offre la
      possibilité de valider la conformité du document à une DTD ou
      bien de ne vérifier que la syntaxe XML (que le document est
      <term>bien formé</term>). On peut choisir d'arrêter la
      compilation Ant sur une erreur, le niveau d'erreur ou encore le
      nombre maximal d'erreurs à afficher par fichier.</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="valid" classname="net.cafebabe.sat.xml.ValidTask"/&gt;</source>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) à valider.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des fichiers à valider.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dtd</co> <co>Indique si l'on doit valider la conformité du
       fichier à une DTD (indiquée dans le <code>DOCTYPE</code>) ou si
       l'on doit se contenter de vérifier qu'il est bien formé (valeur
       <value>false</value>).</co>
       <co>Non (<value>true</value> par
       défaut)</co>
      </li>
      <li>
       <co>failonerror</co>
       <co>Indique si le traitement du fichier Ant doit être arrêté après
        avoir rencontré une erreur (valeur <value>true</value>).</co>
       <co>Non (<value>true</value> par défaut)</co>
      </li>
      <li>
       <co>errorlevel</co> <co>Indique au parser le niveau de ce que
       l'on doit considérer comme des erreurs (qui doivent être
       affichées et éventuellement arrêter le traitement du fichier
       Ant). Les valeurs possibles sont <value>warning</value>,
       <value>error</value> et <value>fatal</value>.</co>
       <co>Non (<value>fatal</value> par défaut)</co>
      </li>
      <li>
       <co>maxerrors</co>
       <co>C'est le nombre maximal d'erreurs à afficher par fichier validé.
        Ce nombre doit être supérieur à 0.</co>
       <co>Non (<value>100</value> par défaut)</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner un ou plusieurs fichiers XML à valider à l'aide
      d'un élément <code>&lt;fileset&gt;</code>. Voire la documentation de Ant
      pour plus de détails sur cet élément.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour valider les fichiers XML d'un répertoire, recopier dans ce
      dernier le buildfile suivant:</p>

     <source>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;

&lt;project name="xml" default="valid" basedir="."&gt;

 &lt;taskdef name="valid" classname="net.cafebabe.sat.xml.ValidTask"/&gt;

 &lt;target name="valid"&gt;
  &lt;valid dtd="true"
         failonerror="true"
         errorlevel="fatal"
         maxerrors="100"&gt;
   &lt;fileset dir="." includes="*.xml"/&gt;
  &lt;/valid&gt;
 &lt;/target&gt;

&lt;/project&gt;</source>

     <p>Puis lancer Ant (taper <keyb>ant</keyb> sur la ligne de commande). On
      notera que les attributs de la tâche de validation sont ceux
      par défaut. Adapter ce fichier pour vos besoins.</p>

     <p>Si l'on souhaite valider les fichiers Ant de son disque, on
      lancera à la racine:</p>

     <source>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;

&lt;project name="xml" default="valid" basedir="."&gt;

 &lt;taskdef name="valid" classname="net.cafebabe.sat.xml.ValidTask"/&gt;

 &lt;target name="valid"&gt;
  &lt;valid dtd="false"
         failonerror="false"
         errorlevel="warning"
         maxerrors="1"&gt;
   &lt;fileset dir="." includes="**/build.xml"/&gt;
  &lt;/valid&gt;
 &lt;/target&gt;

&lt;/project&gt;</source>

     <p>L'attribut <code>dtd</code> est sur <value>false</value> car
      les buildfile sont réputés ne pas avoir de DTD, on demande à ne
      pas arrêter le parsing lorsque l'on rencontre des erreurs de
      manière à scanner tout le disque, on place le niveau d'erreur au
      minimum de manière à détecter tous les problèmes et enfin, on
      demande à n'afficher qu'une erreur de manière à ne pas être noyé
      sous le nombre d'erreurs (qui peut être très important).</p>

    </sect>

   </sect>

   <sect><title>Merge</title>

    <sect><title>Description</title>

     <p>Cet élément permet de fusionner des fichiers XML pour n'en former
      qu'un (contenant les éléments racine des fichiers fusionnés dans
      un élément englobant).</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="merge" classname="net.cafebabe.sat.xml.MergeTask"/&gt;</source>

     <p>Par exemple, cet élément permet de fusionner les deux documents
      XML suivants:</p>

     <source>&lt;?xml version="1.0"?&gt;
&lt;racine&gt;
  &lt;element1/&gt;
  &lt;element2/&gt;
  &lt;element3/&gt;
&lt;/racine&gt;</source>

     <p>et:</p>

     <source>&lt;?xml version="1.0"?&gt;
&lt;racine&gt;
  &lt;element4/&gt;
  &lt;element5/&gt;
&lt;/racine&gt;</source>

     <p>En un seul fichier ci-dessous:</p>

     <source>&lt;?xml version="1.0"?&gt;
&lt;index&gt;
  &lt;racine&gt;
    &lt;element1/&gt;
    &lt;element2/&gt;
    &lt;element3/&gt;
  &lt;/racine&gt;
  &lt;racine&gt;
    &lt;element4/&gt;
    &lt;element5/&gt;
  &lt;/racine&gt;
&lt;/index&gt;</source>

     <p>Cet élément est utile pour générer des documents composites
      issus de la fusion d'autres documents XML. Par exemple, c'est le
      cas de la <link url="http://www.cafebabe.net">page d'accueil de
       mon site</link>. Elle comporte un texte d'introduction, des
      nouvelles brèves et des liens qui sont de petits fichiers
      fusionnés en un seul. Ce fichier résultant est ensuite transformé
      en HTML (en utilisant XSLT) pour donner la page d'accueil.</p>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) à fusionner.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) de fichiers à fusionner.</co>
       <co>Non</co>
      </li>
      <li>
       <co>tofile</co>
       <co>Nom du fichier composite à générer.</co>
       <co>Non (<file>index.xml</file> par défaut)</co>
      </li>
      <li>
       <co>encoding</co>
       <co>C'est l'encodage du fichier résultant. Cet encodage est iso-8859-1
        pour les langues d'Europe de l'ouest, donnant l'élément de
        déclaration XML suivant <code>&lt;?xml version="1.0"
         encoding="iso-8859-1"?&gt;</code>.</co>
       <co>Non (encodage ASCII par défaut)</co>
      </li>
      <li>
       <co>doctype</co>
       <co>C'est la deuxième partie de la déclaration du type de
        document. Par exemple, un doctype <code>article PUBLIC
         "-//CASA//DTD article//FR" "article.dtd"</code> donnera la
        déclaration de type de document <value>&lt;!DOCTYPE article PUBLIC
        "-//CASA//DTD article//FR" "article.dtd"&gt;</value>. L'élément
        racine est déduit du premier mot de ce doctype. En l'absence
        de doctype, l'élément racine est <code>&lt;index&gt;</code></co>
       <co>Non (pas de doctype par défaut)</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner un ou des fichiers XML à fusionner à l'aide
      d'un élément <code>&lt;fileset&gt;</code>. Voire la documentation de Ant
      pour plus de détails sur cet élément.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour fusionner les fichiers XML du répertoire <file>index</file>
      d'encodage <value>ISO 8859-1</value> en un fichier <file>index.xml</file>
      de type <value>index</value>, on utilisera l'élément suivant:</p>

     <source>&lt;merge dir="index"
       tofile="index.xml"
       encoding="iso-8859-1"
       doctype="index PUBLIC '-//CASA//DTD index//FR' 'index.dtd'"/&gt;</source>

     <p>Pour fusionner tous les fichiers XML du répertoire <file>xml</file>
      et de ses sous répertoires en un fichier <file>index.xml</file>,
      on pourra écrire:</p>

     <source>&lt;merge tofile="index.xml"
       encoding="iso-8859-1"
       doctype="index PUBLIC '-//CASA//DTD index//FR' 'index.dtd'"&gt;
  &lt;fileset dir="xml" includes="**/*.xml"/&gt;
&lt;/merge&gt;</source>

    </sect>

   </sect>

   <sect><title>Insert</title>

    <sect><title>Description</title>

     <p>Cette tâche permet de remplacer une instruction de traitement
      par le contenu d'un fichier. On peut ainsi inclure un fragment
      de fichier dans une page HTML par exemple. C'est ainsi que les
      menus sont inclus dans les pages de <link url="http://www.cafebabe.net">
      mon site</link>.</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="insert" classname="net.cafebabe.sat.xml.InsertTask"/&gt;</source>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) à traiter.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des fichiers à traiter</co>
       <co>Non</co>
      </li>
      <li>
       <co>pattern</co>
       <co>C'est le nom de l'instruction de traitement à remplacer. Par
        exemple si ce pattern est <value>foo</value>, alors les instructions
        de traitement remplacées seront <code>&lt;?foo ?&gt;</code>.</co>
       <co>Non (<value>insert</value> par défaut)</co>
      </li>
      <li>
       <co>source</co>
       <co>Fichier à inclure à la place des instructions de traitement.</co>
       <co>Oui</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner les fichiers à traiter à l'aide d'éléments
      <code>&lt;fileset&gt;</code> encapsulés. Voire la documentation de Ant
      pour de plus amples informations.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour remplacer les instructions de traitement <code>&lt;?menu
      ?&gt;</code> des fichiers du répertoire <file>html</file> par le
      contenu du fichier <file>menu.html</file>, on écrira l'élément
      suivant:</p>

     <source>&lt;insert dir="html"
        pattern="menu"
        source="menu.html"/&gt;</source>

    </sect>

   </sect>

   <sect><title>Nest</title>

    <sect><title>Description</title>

     <p>Cette tâche permet d'encapsuler des fichiers dans un fichier,
      à l'emplacement d'une instruction de traitement. On peut ainsi
      inclure des fragments de HTML dans un même corps de document.</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="nest" classname="net.cafebabe.sat.xml.NestTask"/&gt;</source>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) à traiter.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des fichiers à traiter</co>
       <co>Non</co>
      </li>
      <li>
       <co>pattern</co>
       <co>C'est le nom de l'instruction de traitement à remplacer. Par
        exemple si ce pattern est <value>foo</value>, alors les instructions
        de traitement remplacées seront <code>&lt;?foo ?&gt;</code>.</co>
       <co>Non (<value>nest</value> par défaut)</co>
      </li>
      <li>
       <co>source</co>
       <co>Fichier contenant l'instruction de traitement à remplacer
        par les fichiers.</co>
       <co>Oui</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner les fichiers à traiter à l'aide d'éléments
      <code>&lt;fileset&gt;</code> encapsulés. Voire la documentation de Ant
      pour de plus amples informations.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour encapsuler les fichiers du répertoire <file>html</file>
      dans le fichier <file>page.html</file>, à l'emplacement de
      l'instruction de traitement <code>&lt;?body ?</code>, on écrira
      l'élément suivant&dp;</p>

     <source>&lt;nest source="page.html"
      pattern="body"
      dir="html"/&gt;</source>

    </sect>

   </sect>

   <sect><title>Split</title>

    <sect><title>Description</title>

     <p>Cette tâche permet de découper des fichiers selon des instructions
      de traitement. Le nom des fichiers générés est indiqué dans
      les instructions de traitement délimitant le fichier.</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="split" classname="net.cafebabe.sat.xml.SplitTask"/&gt;</source>

     <p>Par exemple, le fichier suivant:</p>

     <source>&lt;?xml version="1.0"?&gt;
&lt;?split file="page1.html"?&gt;
&lt;html&gt;
...
&lt;/html&gt;
&lt;?split file="page1.html"?&gt;
&lt;?split file="page2.html"?&gt;
&lt;html&gt;
...
&lt;/html&gt;
&lt;?split file="page2.html"?&gt;</source>

     <p>Sera découpé en deux fichiers (<file>page1.html</file> et
      <file>page2.html</file>):</p>

     <source>&lt;html&gt;
...
&lt;/html&gt;</source>

     <p>Si la plupart des processeurs XSLT (comme
      <link url="http://www.jclark.com/xml/xt.html">XT</link> ou
      <link url="http://xml.apache.org/xalan">Xalan</link>)
      proposent des extensions pour générer plusieurs documents,
      cette tâche permet de s'abstraire de ces particularités et
      de générer des documents multiples sans polluer son code
      XSLT de particularités propre à l'un ou l'autre de ces
      processeurs.</p>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) à traiter.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des fichiers à traiter</co>
       <co>Non</co>
      </li>
      <li>
       <co>pattern</co>
       <co>Instruction de traitement où s'opère le découpage. Par exemple
        si ce pattern est <value>split</value>, alors les instructions de
        traitement où se fait la découpe seront <code>&lt;?split
         file="foo"?&gt;</code>.</co>
       <co>Non (<value>split</value> par défaut)</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner les fichiers à traiter à l'aide d'éléments
      <code>&lt;fileset&gt;</code> encapsulés. Voire la documentation de Ant
      pour de plus amples précisions.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Pour découper un fichier <file>foo</file> selon les instructions
      de traitement de la forme <code>&lt;?decoupe file="bar"?&gt;</code>,
      on écrira l'élément suivant:</p>

     <source>  &lt;split file="foo"
         pattern="decoupe"/&gt;</source>

    </sect>

   </sect>

   <sect><title>XML Word Count</title>

    <sect><title>Description</title>

     <p>Cette tâche compte les mots de documents XML. Très utile
      lorsqu'on écrit un article calibré. Par défaut, le texte contenu
      dans tout élément du document est pris en compte alors que le
      texte contenu dans les attributs est ignoré. Il est possible de
      changer ce comportement par défaut (voir les paramètres de la
      tâche).</p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="xwc" classname="net.cafebabe.sat.xml.WordCountTask"/&gt;</source>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>separators</co>
       <co>La liste des caractères de séparation des mots.</co>
       <co>Non (a une valeur raisonnable par défaut).</co>
      </li>
      <li>
       <co>excludeElements</co>
       <co>Liste des éléments à exclure du décompte.</co>
       <co>Non (par défaut, aucun élément n'est exclu du décompte.</co>
      </li>
      <li>
       <co>singleElements</co>
       <co>Liste des éléments ne comptant que comme un seul mot.</co>
       <co>Non (par défaut, aucun élément ne compte comme un mot
        unique.</co>
      </li>
      <li>
       <co>includeAttributes</co>
       <co>Liste des attributs à inclure au décompte. Ces attributs
        sont notés sous la forme <value>element@attribut</value>, et
       sont ainsi associés à un élément donné.</co>
       <co>Non (par défaut, aucun attribut n'intervient dans le
        décompte).</co>
      </li>
      <li>
       <co>documentProperties</co>
       <co>Indique un fichier de propriétés des documents (c'est à
        dire une liste des éléments à exclure, ceux comptant comme un
        mot unique et la liste des attributs à inclure au
        décompte). C'est un fichier de propriétés contenant les
        propriétés <code>separators</code>,
        <code>excludeElements</code>, <code>singleElements</code>
        et <code>includeAttributes</code>. Chacune de ces propriétés
        pouvant être vide.</co>
       <co>Non (aucun fichier de propriétés n'est chargé par
        défaut).</co>
      </li>
      <li>
       <co>property</co>
       <co>La propriété Ant à renseigner avec le décompte.</co>
       <co>Oui</co>
      </li>
      <li>
       <co>propertyFiles</co>
       <co>La propriété Ant à renseigner avec le nombre de fichiers
        parsés.</co>
       <co>Non (pas de propriété renseignée par défaut).</co>
      </li>
      <li>
       <co>quiet</co>
       <co>Si sa valeur est <value>yes</value>, la tâche n'affiche pas
        le décompte des mots.</co>
       <co>Non (la valeur par défaut est <value>no</value>).</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner les fichiers à traiter à l'aide d'éléments
      <code>&lt;fileset&gt;</code> encapsulés. Voire la documentation de Ant
      pour de plus amples précisions.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Supposons que nous voulions compter le nombre de mots des
      fichiers XML du répertoire courant, sauf le fichier
      <file>build.xml</file> en excluant l'élément <code>source</code>
      du décompte. Nous pouvons écrire la target suivante&dp;</p>

     <source>&lt;target name="wc">
 &lt;xwc excludeElements="source">
  &lt;fileset dir="." includes="*.xml" excludes="build.xml"/>
 &lt;/xwc>
&lt;/target>
</source>

     <p>Ce qui produira la sortie suivante&dp;</p>

     <source>$ ant wc
Buildfile: build.xml

wc:
      [xwc] 8414 words in 2 file(s).

BUILD SUCCESSFUL
Total time: 4 seconds</source>

     <p>Supposons que nous voulions indiquer les règles du décompte
      dans un fichier de propriétés, <file>document.properties</file>
      comme suit&dp;</p>

     <source>excludeElements=comment,source
singleElements=file,keyb,code
includeAttributes=sect@title</source>

     <p>Ce fichier indique les règles suivantes&dp;</p>

     <list>
      <item>On doit exclure les éléments <code>comment</code> et
       <code>source</code> du décompte.</item>
      <item>Les éléments <code>file</code>, <code>keyb</code> et
       <code>code</code> ne doivent compter que pour un seul mot dans
       le décompte.</item>
      <item>Le texte des attributs <code>title</code> des éléments
       <code>sect</code> soit être pris en compte.</item>
     </list>

     <p>Pour compter les mots des documents XML du répertoire
      <file>xml</file> en utilisant ces règles et placer le résultat
      dans la propriété Ant <code>wc</code>, on pourra écrire&dp;</p>

     <source>&lt;target name="wc">
 &lt;xwc property="wc"
      documentProperties="document.properties">
  &lt;fileset dir="xml" includes="*.xml"/>
 &lt;/xwc>
&lt;/target></source>

    </sect>

   </sect>

   <sect><title>Link</title>

    <sect><title>Description</title>

     <p>Cette tâche permet de vérifier la validité des liens de
      fichiers HTML. Elle distingue deux types de liens: les liens
      <term>locaux</term> (qui appartiennent à un même site et sont
      relatifs) et les liens <term>externes</term> (qui pointent vers
      d'autres sites et qui commencent par <value>http:</value>,
      <value>ftp:</value> ou autre déclaration de protocole).
     </p>

     <p>La déclaration de la tâche (sous l'élément
      <code>&lt;project&gt;</code>) est la suivante:</p>

     <source>&lt;taskdef name="link" classname="net.cafebabe.sat.html.LinkTask"/&gt;</source>

    </sect>

    <sect><title>Paramètres</title>

     <table>
      <th>
       <co>Attribut</co>
       <co>Description</co>
       <co>Requis</co>
      </th>
      <li>
       <co>file</co>
       <co>Fichier(s) à traiter.</co>
       <co>Non</co>
      </li>
      <li>
       <co>dir</co>
       <co>Répertoire(s) des fichiers à traiter</co>
       <co>Non</co>
      </li>
      <li>
       <co>external</co>
       <co>Indique si l'on doit vérifier les liens externes.</co>
       <co>Non (<value>false</value> par défaut).</co>
      </li>
      <li>
       <co>interrupt</co>
       <co>Indique si l'on doit interrompre avec une erreur en cas de lien
        brisé.</co>
       <co>Non (<value>false</value> par défaut).</co>
      </li>
      <li>
       <co>log</co>
       <co>Indique le nom du fichier dans lequel on souhaite enregistrer
        le récapitulatif de la vérification des liens.</co>
       <co>Non</co>
      </li>
     </table>

    </sect>

    <sect><title>Éléments encapsulés</title>

     <p>On peut sélectionner les fichiers à traiter à l'aide d'éléments
      <code>&lt;fileset&gt;</code> encapsulés. Voire la documentation de Ant
      pour de plus amples précisions.</p>

     <p>Cet élément ne prend pas en compte de contenu textuel.</p>

    </sect>

    <sect><title>Exemples</title>

     <p>Supposons que l'on génère des pages HTML dans le répertoire
      <file>html</file> et ses sous répertoires. On veut vérifier les liens
      internes de ce site et interrompre la compilation en cas d'erreur.
      On pourra écrire:</p>

     <source>&lt;link external="false"
      interrupt="true"&gt;
 &lt;fileset dir="html" includes="**/*.html"/&gt;
&lt;/link&gt;</source>

     <p>En cas de lien brisé, la compilation sera interrompue avec un
      message indiquant le fichier concerné et le lien fautif.</p>

     <p>On veut maintenant vérifier les liens externes (ce qui est bien
      plus long) et ne pas interrompre la compilation en cas de lien
      brisé, mais les lister dans un fichier (<file>links.txt</file>). On
      pourra écrire:</p>

     <source>&lt;link external="true"
      interrupt="false"
      log="links.txt"&gt;
 &lt;fileset dir="html" includes="**/*.html"/&gt;
&lt;/link&gt;</source>

    </sect>

   </sect>

  </sect>

  <sect><title>Mode Emacs</title>

   <p>Ant est généralement utilisé pour générer des projets Java et
    est intégré de ce fait dans la plupart des outils de développement
    Java (comme JDE, un mode Emacs pour le développement Java). Il
    peut cependant être très utile en d'autres occasions, par exemple
    pour générer des documents HTML à partir de sources XML. C'est
    pourquoi j'ai développé ce mode qui permet de lancer Ant pour
    générer tout type de projet.</p>

   <p>Pour installer ce mode Ant, copier le fichier
    <file>el/ant.el</file> dans le répertoire de votre choix où Emacs
    sera capable de le retrouver, puis ajouter les lignes suivantes à
    votre fichier de configuration <file>.emacs</file>&dp;</p>

   <source>(load "ant")
(ant-mode)</source>

   <p>Lorsque vous relancez Emacs, il apparait un menu
    <code>Ant</code> comportant les entrées suivantes&dp;</p>

   <list>
    <item><imp>Build</imp>: Permet de lancer Ant. Une invite dans le
     minibuffer vous donne l'occasion de saisir la cible à lancer. Si
     vous ne donnez pas de cible, c'est la cible par défault du
     buildfile qui est exécutée. Il est possible de passer plusieurs
     cibles en les séparant par des espaces.</item>
    <item><imp>Rebuild</imp>: Relance Ant avec la cible spécifiée lors
     de sa dernière exécution.</item>
    <item><imp>Build File</imp>: Par défaut, le buildfile est
     recherché récursivement en remontant dans l'arborescence des
     répertoires. Avec cette option, il est possible d'idiquer un
     buildfile quelconque.</item>
    <item><imp>Targets</imp>: Inscrit dans le minibuffer la liste des
     cibles du buildfile.</item>
    <item><imp>Help</imp>: Affiche une aide sur le buildfile (la liste
     des cibles et leur description).</item>
    <item><imp>Start Server</imp>: Lance Ant en mode server (voir la
     tâche <code>server</code> ci-dessus). Cette fonctionalité est
     encore expérimentale et passablement buggée.</item>
    <item><imp>Stop Server</imp>: Arrête Ant lancé en mode
     server.</item>
   </list>

   <p>Le résultat du build est affiché dans un buffer de compilation,
    ce qui permet de cliquer sur les erreurs pour ouvrir le fichier
    fautif dans Emacs.</p>

   <p>Il peut être très commode d'affecter ces appels à Ant à des
    touches du clavier. Par exemple, mon fichier <file>.emacs</file>
    comporte les affectations suivantes&dp;</p>

   <source>(global-set-key [f2] 'ant-build)
(global-set-key [f3] 'ant-rebuild)</source>

  </sect>

  <sect><title>Licence</title>

   <p>Ce logiciel est distribué sous licence
    <link url="http://www.apache.org/LICENSE.txt">Apache Software
     License</link>. Vous trouverez une copie de cette licence dans le
    répertoire d'installation de SAT, dans le fichier <file>LICENSE</file>.</p>

  </sect>

  <sect><title>Historique</title>
  
   <sect><title>Version 1.0 (2003-07-15)</title>

    <p>Les modifications sont les suivantes&dp;</p>

    <list>
     <item>La tache <code>valid</code> a été munie d'un nouvel attribut
      <code>reference</code> (fichier servant de référence pour les dates&dp;
      un fichier n'est validé que s'il est plus récent que la régérence,
      cette référence est mise à jour après chaque validation). On évite
      ainsi de valider inutilement des fichiers. Attention, si la DTD a
      changée, le système ne peut le savoir et un fichier XML peut ne pas
      etre validé dans ce cas. Pour etre certain que tous les fichiers seront
      validés, ne pas renseigner cet attribut.</item>
     <item>La tache <code>insert</code> a été modifiée de manière à ce qu'elle
      n'insère le fichier source que dans les fichiers plus récents que la
      dernière insertion (nouvel attribut référence dans la tache
      <code>insert</code>).</item>
    </list>

   </sect>
  
   <sect><title>Version 0.9 (2003-07-14)</title>

    <p>Les modifications sont les suivantes&dp;</p>

    <list>
     <item>La tache <code>server</code> a été supprimée du projet et ne
      sera plus supportée. Utiliser la Console Ant à la place (plus simple
      à mettre en oeuvre).</item>
    </list>

   </sect>

   <sect><title>Version 0.8 (2003-07-13)</title>

    <p>Les modifications sont les suivantes&dp;</p>

    <list>
     <item>Toutes les tâches ont changé de package (pour passer dans
      <code>net.cafebabe.sat</code>). C'est la dernière fois, promis
      juré :o)</item>
     <item>Développement de la console  (qui est sensiblement plus
      efficace que le mode serveur).</item>
     <item>Scripts <file>antc</file> pour lancer la console et
      <file>ants</file> pour lancer le  mode serveur.</item>
    </list>

   </sect>

   <sect><title>Version 0.7 (2002-11-11)</title>

    <p>La documentation a été passée à ma nouvelle DTD et mise à
     jour.</p>

    <p>Nouvelles tâches&dp;</p>

    <list>
     <item>Server: Accélère les builds.</item>
     <item>Nest: Nouvelle tâche de manipulation XML.</item>
     <item>XML Word Count: Pour compter les mots d'un document
      XML.</item>
    </list>

    <p>Corrections et améliorations multiples&dp;</p>

    <list>
     <item>Débuggage de la tâche XTask (pour faire tourner en mode
      serveur).</item>
     <item>Amélioration de la gestion de l'encodage de la tâche
      <code>merge</code>.</item>
     <item>Mise à jour pour Ant version 1.5.1.</item>
    </list>

   </sect>

   <sect><title>Version 0.6 (2001-10-27)</title>

    <p>Optimisation de la tâche <code>Merge</code> (par utilisation de
     <code>StringBuffers</code>). On peut espérer un gain de performances
     d'un facteur 30 !</p>

   </sect>

   <sect><title>Version 0.5 (2001-10-17)</title>

    <p>Nouvelle tâche <code>Valid</code> pour validation des fichiers XML.</p>

   </sect>

   <sect><title>Version 0.4 (2001-09-22)</title>

    <p>Nouvelle tâche <code>Link</code> permettant de tester les liens de
     fichiers HTML.</p>

   </sect>

   <sect><title>Version 0.3 (2001-09-18)</title>

    <p>Test des attributs des tâches. Les attributs de fichier
     (<code>file</code> et <code>dir</code>) sont testés.</p>

    <p>Correction de bugs (les chemins des fichiers sont maintenant
     relatifs au répertoire du fichier de projet).</p>

    <p>Dans une tâche <code>BSH</code>, on peut maintenant lire et écrire
     des propriétés Ant avec les commandes <code>setAntProperty()</code>
     et <code>getAntProperty()</code>.</p>

    <p>Les tâches ne sont plus exécutables en tant que programme
     indépendant (il est beaucoup plus pratique des les exécuter dans
     Ant et c'est très pénible à maintenir).</p>

    <p>Le code a été adapté aux dernières versions de Beanshell (version
     1.1a18 supportée, la 1.2b1 ne fonctionne pas à cause d'un bug).</p>

    <p>Implémentation de tests unitaires (dans le répertoire
     <file>prj/test</file>).</p>

   </sect>
   
   <sect><title>Version 0.2 (2001-08-20)</title>

    <p>Adoption de l'API JAXP pour la tâche XTask. Permet d'instancier
     le parser XML de manière générique (la tâche est maintenant indépendante
     du parser SAX utilisé pourvu qu'il implémente l'API JAXP).</p>

   </sect>

   <sect><title>Version 0.1 (2001-06-06)</title>
    
    <p>Les tâches ont été remaniées (après usage intensif pour construire
     mon site) de manière à être plus efficaces/ergonomiques. Les
     changements sont les suivants:</p>
    
    <list>
     <item><code>bsh</code>: Les éléments encapsulés
      <code>&lt;arg&gt;</code> ont disparus (on initialise des
      variables dans un script encapsulé).  L'attribut
      <code>args</code> est apparu pour passer des arguments comme
      s'ils avaient été passés sur la ligne de commande.  L'attribut
      <code>source</code> a été remplacé par <code>file</code>.
      Apparition de l'attribut <code>dir</code>. Implémentation de
      l'élément <code>&lt;fileset&gt;</code>. Redirection de la sortie
      des scripts de manière standard (après un marqueur
      [bsh]).</item>
     <item><code>xtask</code>: Correction de bug. Refonte complète des
      attributs (peu utilisables dans la version
      précédente). Implémentation de l'élément
      <code>&lt;fileset&gt;</code>.</item> <item><code>merge</code>,
      <code>insert</code> et <code>split</code>: harmonisation avec
      les attributs <code>file</code> et <code>dir</code>. Attribut
      verbose supprimé (optimisation des messages). Implémentation de
      l'élément <code>&lt;fileset&gt;</code>.</item>
    </list>
    
    <p>Il ne devrait plus intervenir de changements concernant la
     syntaxe des tâches. Les versions futures ne feront que stabiliser
     le code (il reste à tester intensivement es tâches et à coder des
     tests sur les attributs des tâches pour afficher des messages d'erreur
     clairs).</p>

   </sect>

   <sect><title>Version 0.0 (2001-05-28)</title>

    <p>Première version de SAT. Comporte les tâches <code>Bsh</code>,
     <code>XTask</code>, <code>Merge</code>, <code>Insert</code> et
     <code>Split</code>.</p>

   </sect>

  </sect>

  <p><imp>Enjoy !</imp></p>

 </text>

</article>

<!-- Local IspellDict: francais -->
